{"version":3,"sources":["components/monitorContext.js","components/WebSocket.js","components/Content.js","components/Monitor.js","App.js","serviceWorker.js","index.js"],"names":["monitorContext","React","createContext","client","W3CWebSocket","Websock","onopen","console","log","onmessage","evt","received_msg","JSON","parse","data","context","updateContext","onclose","e","close","this","Component","contextType","MonitorContext","Textbox","props","id","style","textAlign","value","Content","param","options","responsive","animation","duration","easing","maintainAspectRatio","aspectRatio","title","display","text","fontSize","fontColor","tooltips","mode","intersect","legend","scales","xAxes","type","scaleLabel","labelString","ticks","maxRotation","autoSkip","yAxes","min","max","maxtickslimit","pan","enabled","rangeMax","x","rangeMin","zoom","data1","labels","chart1_labels","datasets","chart1_data","backgroundColor","borderColor","borderWidth","borderJoinStyle","pointStyle","fill","data2","chart2_labels","chart2_data","Fragment","className","height","width","map","el","key","dynamic_textbox_values","settings_textbox_values","DataCache1","DataCache2","LabelsCache1","LabelsCache2","Monitor","recvd_data","txt_data","textbox_values","d_pts","graph_data_points","d1","state","d2","push","l1","l2","Date","now","length","shift","setState","checkBufferOverFlow","Provider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c33c721e.chunk.js","sourcesContent":["import React from 'react';\n\nconst monitorContext = React.createContext();\nexport default monitorContext;","import React, { Component } from 'react';\nimport MonitorContext from './monitorContext';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\n// import  './Charts.css';\n\nconst URL = 'ws://127.0.0.1:8080';\nlet client = new W3CWebSocket(URL);\n\nexport default class Websock extends Component {\n  static contextType = MonitorContext;\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n      // client.send('data sent');\n    };\n    client.onmessage = (evt) => {\n      var received_msg = JSON.parse(evt.data);\n      // console.log(this.context);\n      this.context.updateContext(received_msg);\n      // console.log(received_msg);  \n    }\n    client.onclose = e => {\n        console.log(\"disconnected\");\n        client = new W3CWebSocket(URL);\n    };\n  }\n  componentWillUnmount(){\n    client.close();\n  }\n  render() {\n    console.log(this.context);\n    return (\n      <div/>\n    );\n  }\n}\n\n","import React from 'react';\nimport 'chartjs-plugin-zoom';\nimport 'chartjs-plugin-streaming';\nimport {Bar, Line} from 'react-chartjs-2';\nimport MonitorContext from './monitorContext';\nimport './Monitor.css';\n\nconst Textbox = (props) => (\n    <div id={props.id} style={{textAlign:'center'}}> <h2>{props.value}</h2> </div>\n);\n\nclass Content extends React.Component {\n    static contextType = MonitorContext;\n\n    param =['Pulse Rate', 'Pulse Pressure', 'Respiratory Rate', 'Body Temp', 'Blood Presure', 'Volume'];\n\n    options = {\n        responsive: true,\n        animation: {\n          duration: 0.1 * 1.5,\n          easing: 'linear'\n        },\n        maintainAspectRatio: true,\n        aspectRatio: 3.5,\n        title:{\n            display: true,\n            text: 'Sample',\n            fontSize: 20,\n            fontColor:'white'\n        },\n\n        tooltips: {\n          mode: 'nearest',\n          intersect: false\n        },\n        legend: {\n            display: false,\n            // position: 'right'\n        },\n        scales: {\n            xAxes: [\n                {\n                  type:'realtime',\n                  // realtime: {\n\n                    // onRefresh: function(chart) {\n                    //   chart.data.datasets.forEach(function(dataset) {    \n                    //     // dataset.data.push({    \n                    //     //   x: Date.now(),    \n                    //     //   y:7    \n                    //     // });    \n                    //   });    \n                    // },\n\n                    // duration: 60000,\n                    // refresh: 1000,\n                    // delay: 2000,\n                    // pause: false,\n                    // // ttl: undefined,\n                    // frameRate: 48,\n    \n                    // delay: 2000,\n                    // duration: 20000 \n                  // },\n                  scaleLabel: {\n                    display: true,\n                    labelString: \"x\"\n                  },\n                  ticks: {\n                    maxRotation: 0,\n                    autoSkip: false,\n                    fontColor: 'white'\n                    // maxtickslimit: 1000,\n                    // min: Date.now()-5000\n                  },\n                }],\n            yAxes: [{\n                ticks: {\n                  maxRotation: 0,\n                  min:0,\n                  max:100,\n                  maxtickslimit: 1000,\n                  fontColor: 'white'\n                },\n                // gridLines:{\n                //   display: false\n                // }\n            }]\n        },\n\n        pan: {\n          enabled: true,\n          mode: 'x',\n          rangeMax: {\n            x: 4000\n          },\n          rangeMin: {\n            x: 0\n          }\n          // threshold: 1000,\n        },\n        zoom: {\n          enabled: true,\n          mode: 'xy',\n          rangeMax: {\n            x: 20000\n          },\n          rangeMin: {\n            x: 1000\n          },\n          // drag: false,\n          // speed: 0.01\n        }\n\n    }\n\n    render(){\n        let data1 = { \n            // labels: [],\n            labels: this.context.chart1_labels,\n            // labels: labels.concat(new Date().toLocaleTimeString()),\n            datasets: [{\n                    // label: 'sample chart1',\n                    // data: [],\n                    data: this.context.chart1_data,\n                    backgroundColor: 'rgba(175,122,119,1)',\n                    borderColor: 'rgba(225,120,20,1)',\n                    borderWidth: 2,\n                    borderJoinStyle: 'bevel',\n                    pointStyle: 'circle',\n                    // lineTension: 0.45,\n                    fill: false,\n                }]\n        }\n        let data2 = { \n            // labels: [],\n            labels: this.context.chart2_labels,\n            // labels: labels.concat(new Date().toLocaleTimeString()),\n            datasets: [{\n                    // label: 'sample chart2',\n                    // data: [],\n                    data: this.context.chart2_data,\n                    backgroundColor: 'rgba(175,122,119,1)',\n                    borderColor: 'rgba(225,120,20,1)',\n                    borderWidth: 2,\n                    borderJoinStyle: 'bevel',\n                    pointStyle: 'circle',\n                    // lineTension: 0.45,\n                    fill: false,\n                }]\n        }\n\n        return (\n            <React.Fragment>\n                    <div className=\"charts_container\">\n                        <Line \n                            // ref={this.chart1}\t\n                            height={null}\n                            width={null}\n                            data={data1} \n                            options={this.options}\n                        />\n                        <Line \n                            // ref={this.chart2}\t\n                            height={null}\n                            width={null}\n                            data={data2} \n                            options={this.options}\n                        />\n                    </div>\n                    <div className = \"textbox_container\">\n                        \n                        {this.param.map((el,id)=>\n                            <div key = {id} className=\"textbox\">\n                                <div style={{textAlign:'center'}}><h4>{el}</h4></div>\n                                <div className=\"text_values\">\n                                <Textbox \n                                    value = {this.context.dynamic_textbox_values[id]}\n                                    id={id} \n                                />\n                                <Textbox \n                                    value = {this.context.settings_textbox_values[id]}\n                                    id={id} \n                                />\n                                </div>\n                            </div>\n                        )}\n                    </div>\n            </React.Fragment>\n        )\n    }\n    \n}\n\nexport default Content;\n","import React, { Component } from 'react'\nimport MonitorContext from './monitorContext';\nimport './Monitor.css';\nimport Websock from './WebSocket';\nimport Content from './Content';\n\nconst BUFFER_SIZE =4000;\n// const VISIBLE_XTICKS_LIMIT = 1000;\nconst DataCache1 = [];\nconst DataCache2 = [];\nconst LabelsCache1 = [];\nconst LabelsCache2 = [];\n\nclass Monitor extends Component {\n\n    updateContext = (recvd_data) => {\n        // console.log(recvd_data)\n        const txt_data = recvd_data.textbox_values;\n        const d_pts = recvd_data.graph_data_points;\n        const d1 = [...this.state.chart1_data];\n        const d2 = [...this.state.chart2_data];\n        d1.push(d_pts[0]);\n        d2.push(d_pts[1]);\n        const l1 = [...this.state.chart1_labels];\n        const l2 = [...this.state.chart2_labels];\n        l1.push(Date.now());\n        l2.push(Date.now());\n    \n        // console.log(\"d1\",d1,\"d2\",d2,\"l1\",l1,\"l2\",l2)\n        if(this.state.chart1_data.length > BUFFER_SIZE || this.state.chart1_data.length > BUFFER_SIZE)\n        {\n          DataCache1.push(this.state.chart1_data[0]);\n          LabelsCache1.push(this.state.chart1_labels[0]);\n    \n          DataCache2.push(this.state.chart2_data[0]);\n          LabelsCache2.push(this.state.chart2_labels[0]);\n\n          l1.shift();\n          l2.shift();\n          d1.shift();\n          d2.shift();\n          \n        }\n        this.setState({\n          dynamic_textbox_values: txt_data,\n          chart1_labels: l1,\n          chart2_labels: l2,\n          chart1_data: d1,\n          chart2_data: d2\n        });\n        // console.log(this.state);\n        console.log(\"Cache:\",DataCache1,DataCache2); \n      }\n\n\n    state = {\n          dynamic_textbox_values : ['val1', 'val2', 'val3', 'val4', 'val5', 'val6'],\n          settings_textbox_values : ['39','27', '96', '78', '48', '84'],\n          chart1_data: [],\n          chart1_labels : [],\n          chart2_data: [],\n          chart2_labels: [],\n      \n          updateContext : this.updateContext,\n          checkBufferOverFlow: this.checkBufferOverFlow\n        }\n\n\n    // checkBufferOverFlow = () => {\n    //     if(this.state.chart1_data.length > BUFFER_SIZE || this.state.chart1_data.length> BUFFER_SIZE)\n    //     { \n    //       DataCache1.push(this.state.chart1_data[0]);\n    //       LabelsCache1.push(this.state.chart1_labels[0]);\n    \n    //       DataCache2.push(this.state.chart2_data[0]);\n    //       LabelsCache2.push(this.state.chart2_labels[0]);\n    \n    //       let lb1 = this.state.chart1_labels;\n    //       let lb2 = this.state.chart2_labels;\n    //       let d1 =  this.state.chart1_data;\n    //       let d2 = this.state.chart2_data;\n    //       lb1.slice(1);\n    //       lb2.slice(1);\n    //       d1.slice(1);\n    //       d2.slice(1);\n            \n    //       this.setState({\n    //         chart1_labels: lb1,\n    //         chart2_labels: lb2,\n    //         chart1_data: d1,   \n    //         chart2_data: d2  \n    //       })  \n    //       console.log(\"Cache:\",DataCache1,DataCache2); \n    //       console.log(\"Data Cached\");\n    //     }\n    // }\n\n    // componentDidMount(){\n    //     this.checkBufferOverFlow();\n    // } \n\n    render() {\n        return (\n            <React.Fragment>\n                <MonitorContext.Provider value = {this.state}>\n                  <Content />\n                  <Websock/>\n                </MonitorContext.Provider>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Monitor;","import React,{Component} from 'react';\nimport Monitor from './components/Monitor';\nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n        <div className = \"App\">\n\n            <div className=\"Main\">\n                <div className =\"dummy\"></div>\n                <div className=\"top\"></div>\n                    <Monitor />\n            </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}